#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('OHI-O2015:server');
var server = require('http').Server(app);
var io = require('socket.io')(server);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * socket.io stuff
 **/

  var rooms=[];

  function addNewClient(){
      var thisRoom = io.sockets.adapter.rooms[rooms[rooms.length-1]];
      console.log("currentroomId", rooms[rooms.length-1]);
      if (thisRoom && Object.keys(thisRoom).length < 2) {
          console.log("lengthOfRoom", Object.keys(thisRoom).length);
          console.log("joinExistingRoom", rooms[rooms.length-1]);
          // add person to last made room
          return rooms[rooms.length-1];
      }
      else {
          // make new room
          var roomId = Math.random().toString(36).slice(2);
          rooms.push(roomId);
          console.log("madeNewRoom", roomId);
          return roomId;
      }
  }

 io.sockets.on('connection', function (socket) {
   socket.on('join', function (data) {
     var roomId = addNewClient();
     socket.join(roomId); // We are using room of socket io
     socket.emit('giveRoomIdToClient', roomId);

     var thisRoom = io.sockets.adapter.rooms[roomId];
     if (Object.keys(thisRoom).length < 2) {
         io.to(roomId).emit('chat message', "Welcome to " + roomId + " - please wait to be joined!");
     }
     else {
         io.to(roomId).emit('chat message', "Welcome to room " + roomId + " - say hi!");
     }
   });
 });

io.on('connection', function(socket) {
    console.log('a user connected');
    socket.on('disconnect', function() {
        console.log('user disconnected');
        // io.sockets.clients(someRoom).forEach(function(s){
        //     s.leave(someRoom);
        // });
    });
});

io.on('connection', function(socket) {
    socket.on('chat message', function(msg) {
        console.log('message: ' + msg);
        io.to(msg.currentRoomId).emit('chat message', msg.message);
    });
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
